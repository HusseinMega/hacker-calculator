name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            git \
            ffmpeg \
            libsdl2-dev \
            libsdl2-image-dev \
            libsdl2-mixer-dev \
            libsdl2-ttf-dev \
            libportmidi-dev \
            libswscale-dev \
            libavformat-dev \
            libavcodec-dev \
            zlib1g-dev \
            libgstreamer1.0-dev \
            gstreamer1.0-plugins-base \
            gstreamer1.0-plugins-good \
            openjdk-17-jdk \
            unzip \
            wget \
            autoconf \
            automake \
            libtool \
            pkg-config

      - name: Install Buildozer
        run: |
          pip install --upgrade pip
          pip install --upgrade buildozer cython==0.29.33
          pip install --upgrade python-for-android

      - name: Fix duplicate entries in buildozer.spec
        run: |
          echo "=== Fixing buildozer.spec duplicates ==="
          if [ -f buildozer.spec ]; then
            # إزالة الأسطر المكررة
            awk '!seen[$0]++' buildozer.spec > buildozer.spec.tmp
            mv buildozer.spec.tmp buildozer.spec
            
            # عرض الإعدادات
            echo "=== Current buildozer.spec Android settings ==="
            grep "^android\." buildozer.spec | grep -v "^#"
          fi

      - name: Cache Buildozer global packages
        uses: actions/cache@v3
        with:
          path: ~/.buildozer
          key: buildozer-global-${{ hashFiles('buildozer.spec') }}-v4

      - name: Cache Buildozer local build
        uses: actions/cache@v3
        with:
          path: .buildozer
          key: buildozer-local-${{ hashFiles('buildozer.spec') }}-v4

      - name: Build with Buildozer (accept all prompts)
        run: |
          # مسح متغيرات Android المتعارضة
          unset ANDROID_HOME
          unset ANDROID_SDK_ROOT
          unset ANDROID_NDK_HOME
          unset ANDROID_NDK
          unset ANDROID_NDK_ROOT
          
          # السماح لـ buildozer بإدارة كل شيء
          echo "=== Starting Build ==="
          echo "=== Python version: $(python --version) ==="
          echo "=== Buildozer version: $(buildozer --version) ==="
          
          # تشغيل buildozer مع معالجة الأخطاء
          if yes | buildozer -v android debug 2>&1 | tee build.log; then
            echo "=== Build completed successfully ==="
          else
            echo "=== Build Failed ==="
            echo ""
            echo "=== Last 150 lines of build log ==="
            tail -n 150 build.log
            echo ""
            echo "=== Searching for ERROR keywords ==="
            grep -i "error\|exception\|failed" build.log | tail -n 30 || true
            echo ""
            echo "=== Checking if APK was created despite errors ==="
            find . -name "*.apk" -type f -exec ls -lh {} \; || echo "No APK files found"
            exit 1
          fi

      - name: List and move APK files
        if: success()
        run: |
          echo "=== Searching for APK files in entire project ==="
          find . -name "*.apk" -type f 2>/dev/null || echo "No APK files found anywhere!"
          
          echo ""
          echo "=== Checking common buildozer output locations ==="
          ls -la bin/ 2>/dev/null || echo "bin/ directory does not exist"
          ls -la .buildozer/android/platform/build-*/dists/*/build/outputs/apk/ 2>/dev/null || echo "Standard APK output path does not exist"
          
          echo ""
          echo "=== Looking for debug APK specifically ==="
          find .buildozer -name "*debug*.apk" -type f 2>/dev/null || echo "No debug APK found in .buildozer"
          
          # إنشاء مجلد output
          mkdir -p output
          
          # نسخ جميع ملفات APK إلى مجلد واحد
          echo ""
          echo "=== Copying APK files to output/ ==="
          APK_COUNT=$(find . -name "*.apk" -type f 2>/dev/null | wc -l)
          echo "Found $APK_COUNT APK file(s)"
          
          if [ "$APK_COUNT" -gt 0 ]; then
            find . -name "*.apk" -type f -exec cp -v {} output/ \;
            echo ""
            echo "=== Files in output/ ==="
            ls -lh output/
          else
            echo "ERROR: No APK files found! Build may have failed silently."
            echo ""
            echo "=== Checking build.log for clues ==="
            tail -n 50 build.log
            exit 1
          fi

      - name: Upload APK
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: HackerCalculator-APK
          path: |
            output/*.apk
            bin/*.apk
            .buildozer/android/platform/build-*/dists/*/build/outputs/apk/**/*.apk
          if-no-files-found: error

      - name: Upload build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: build.log
          if-no-files-found: ignore

      - name: Upload full buildozer logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: buildozer-logs
          path: |
            .buildozer/android/platform/build-*/logs/**/*
            .buildozer/android/logs/**/*
          if-no-files-found: ignore
